@* Potřebné namespace *@
@namespace Taskly.Components.Dialogs
@using Taskly.Services.Auth
@using Firebase.Auth;

@* Služby pro DI *@
@inject IAuthService FirebaseAuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject FirebaseAuthClient authClient
@inject INotificationService NotificationService

@* UI komponenta dialogu pro změnu hesla *@
<MudDialog>
    <DialogContent>
        <MudStack>
            <MudTextField @bind-Value="CurrentPassword"
                          Label="Současné heslo"
                          Variant="Variant.Outlined"
                          InputType="InputType.Password"
                          Required="true" />
            <MudTextField @bind-Value="NewPassword"
                          Label="Nové heslo"
                          Variant="Variant.Outlined"
                          InputType="InputType.Password"
                          Required="true" />
            <MudTextField @bind-Value="ConfirmPassword"
                          Label="Potvrzení nového hesla"
                          Variant="Variant.Outlined"
                          InputType="InputType.Password"
                          Required="true" />
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Disabled="isProcessing">Zrušit</MudButton>
        <MudButton Color="Color.Primary"
                   OnClick="Submit"
                   Disabled="isProcessing">
            @if (isProcessing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Zpracovávám...</MudText>
            }
            else
            {
                @("Změnit heslo")
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    // PARAMETRY A PROMĚNNÉ
    // Kaskádový parametr pro dialog - MudBlazor ho automaticky nastaví
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; } = default!;

    // Proměnné pro formulářové vstupy
    private string? CurrentPassword { get; set; }
    private string? NewPassword { get; set; }
    private string? ConfirmPassword { get; set; }

    // Stav zpracování - zabraňuje vícenásobným odesláním formuláře
    private bool isProcessing = false;

    // UI AKCE
    // Zavření dialogu bez provedení akce
    private void Cancel()
    {
        MudDialog.Cancel();
    }

    // ZPRACOVÁNÍ FORMULÁŘE
    // Odeslání formuláře a změna hesla - tohle je hlavní funkce tohoto dialogu
    private async Task Submit()
    {
        if (isProcessing) return;

        try
        {
            // Nastavíme příznak zpracování, aby uživatel nemohl kliknout vícekrát
            isProcessing = true;

            // VALIDACE VSTUPŮ
            // Kontrolujeme, že všechna pole jsou vyplněna
            if (string.IsNullOrEmpty(CurrentPassword) ||
                string.IsNullOrEmpty(NewPassword) ||
                string.IsNullOrEmpty(ConfirmPassword))
            {
                NotificationService.ShowToast("Všechna pole jsou povinná", NotificationType.Warning);
                return;
            }

            // Ověříme, že se nová hesla shodují
            if (NewPassword != ConfirmPassword)
            {
                NotificationService.ShowToast("Nová hesla se neshodují", NotificationType.Warning);
                return;
            }

            // Kontrolujeme minimální délku hesla
            if (NewPassword.Length < 8)
            {
                NotificationService.ShowToast("Nové heslo musí mít alespoň 8 znaků", NotificationType.Warning);
                return;
            }

            // Kontrola komplexity hesla pomocí regulárního výrazu
            // Heslo musí obsahovat malé a velké písmeno, číslo a speciální znak
            const string passwordPattern = @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$";
            if (!System.Text.RegularExpressions.Regex.IsMatch(NewPassword, passwordPattern))
            {
                // Použijeme stejnou chybovou hlášku jako při registraci - pro konzistenci
                NotificationService.ShowToast("Heslo musí obsahovat alespoň jedno velké písmeno, malé písmeno, číslo a speciální znak", NotificationType.Warning);
                return; // Ukončit zpracování
            }

            // IDENTIFIKACE UŽIVATELE
            // Získáme aktuálně přihlášeného uživatele, abychom zjistili jeho email
            var user = await FirebaseAuthService.GetCurrentUserAsync();
            if (user == null || string.IsNullOrEmpty(user.Email))
            {
                NotificationService.ShowToast("Pro změnu hesla musíte být přihlášeni", NotificationType.Error);
                return;
            }

            string userEmail = user.Email;
            string? userId = user.DocumentId;

            try
            {
                // OVĚŘENÍ A ZMĚNA HESLA
                // Nejprve ověříme současné heslo přihlášením k Firebase
                var userCredential = await authClient.SignInWithEmailAndPasswordAsync(userEmail, CurrentPassword);

                // Provedeme změnu hesla - tohle volá Firebase API
                await userCredential.User.ChangePasswordAsync(NewPassword);

                // ODHLÁŠENÍ PO ZMĚNĚ HESLA
                // Odhlásíme uživatele lokálně z Firebase klienta
                authClient.SignOut();

                // Odhlášení na straně serveru - tohle je pro bezpečnost
                // Ujistíme se, že userId není null před voláním LogoutAsync
                if (!string.IsNullOrEmpty(userId))
                {
                    await FirebaseAuthService.LogoutAsync(userId);
                }
                else
                {
                    // Upozornění, že nebylo možné odhlásit uživatele na straně serveru
                    NotificationService.ShowToast("Varování: Nepodařilo se získat ID uživatele pro odhlášení na serveru", NotificationType.Warning);
                }

                // Odstraníme tokeny ze SecureStorage - tím vynucujeme nové přihlášení
                SecureStorage.Remove("firebase_token");
                SecureStorage.Remove("refresh_token");

                // ZÁZNAM O ZMĚNĚ DO HISTORIE
                // Uložíme důležitou bezpečnostní událost do historie pro přehled aktivit
                await NotificationService.AddNotificationAsync(new NotificationItem
                    {
                        Message = "Vaše heslo bylo úspěšně změněno",
                        Type = NotificationType.Success,
                        Category = NotificationCategory.System,
                        Title = "Změna hesla"
                    }, showAfterForceLoad: true);

                // Zavřeme dialog s úspěšným výsledkem
                MudDialog.Close(DialogResult.Ok(true));

                // PŘESMĚROVÁNÍ NA PŘIHLÁŠENÍ
                // Nutíme uživatele znovu se přihlásit s novým heslem - forceLoad zajistí úplné překreslení
                NavigationManager.NavigateTo("/login", forceLoad: true);
            }
            catch (Firebase.Auth.FirebaseAuthException firebaseEx)
            {
                // Překládáme chybové kódy Firebase na srozumitelné zprávy pro uživatele
                string errorMessage;
                if (firebaseEx.Message.Contains("INVALID_LOGIN_CREDENTIALS"))
                {
                    errorMessage = "Aktuální heslo není správné";
                }
                else if (firebaseEx.Message.Contains("requires-recent-login") || firebaseEx.Message.Contains("REQUIRES_RECENT_LOGIN"))
                {
                    errorMessage = "Pro změnu hesla je nutné se znovu přihlásit. Odhlaste se a zkuste to znovu.";
                }
                else
                {
                    errorMessage = $"Chyba Firebase: {firebaseEx.Message}";
                }

                NotificationService.ShowToast(errorMessage, NotificationType.Error);
            }
        }
        catch (ApplicationException ex)
        {
            // Zpracování aplikačních výjimek - tyto mají už připravenou zprávu
            NotificationService.ShowToast(ex.Message, NotificationType.Error);
        }
        catch (Exception ex)
        {
            // Zpracování obecných výjimek 
            NotificationService.ShowToast($"Došlo k neočekávané chybě při změně hesla: {ex.Message}", NotificationType.Error);
        }
        finally
        {
            // Vždy nakonec resetujeme příznak zpracování, aby uživatel mohl znovu zkusit akci
            isProcessing = false;
        }
    }
}